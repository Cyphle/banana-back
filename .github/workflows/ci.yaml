name: Build and Push to ECR

on:
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      ECR_NAMESPACE: banana
      IMAGE_NAME: banana-back

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl
          override: true
          components: rustfmt, clippy

      - name: Cache OpenSSL musl
        uses: actions/cache@v3
        id: cache-openssl
        with:
          path: /musl
          key: openssl-musl-1.1.1w

      - name: Install dependencies for musl and OpenSSL
        run: |
          sudo apt-get update
          sudo apt-get install -y \
          musl-tools \
          musl-dev \
          pkg-config \
          libssl-dev \
          openssl \
          build-essential

      - name: Install musl OpenSSL
        run: |
          # Télécharger et compiler OpenSSL pour musl
          wget https://www.openssl.org/source/openssl-1.1.1w.tar.gz
          tar xzf openssl-1.1.1w.tar.gz
          cd openssl-1.1.1w
          
          CC="musl-gcc -fPIE -pie" ./Configure no-shared no-async --prefix=/musl --openssldir=/musl/ssl linux-x86_64
          make depend
          make -j$(nproc)
          sudo make install
          
          cd ..
          rm -rf openssl-1.1.1w*

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --release

      - name: Run Clippy
        run: cargo clippy --release
#        run: cargo clippy --release -- -D warnings

      - name: Build for Alpine
        env:
          OPENSSL_DIR: /musl
          OPENSSL_STATIC: 1
          PKG_CONFIG_ALLOW_CROSS: 1
        run: cargo build --release --target x86_64-unknown-linux-musl

      - name: Login to Scaleway Container Registry
        uses: docker/login-action@v3
        with:
          username: nologin
          password: ${{ secrets.SCW_SECRET_KEY }}
          registry: ${{ vars.CONTAINER_REGISTRY_ENDPOINT }}

      - name: Build the Docker image
        run: docker build . -t ${{ vars.CONTAINER_REGISTRY_ENDPOINT }}/${{ env.ECR_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Tag image as latest
        run: docker tag ${{ vars.CONTAINER_REGISTRY_ENDPOINT }}/${{ env.ECR_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ vars.CONTAINER_REGISTRY_ENDPOINT }}/${{ env.ECR_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest

      - name: Push the Docker Image with SHA tag
        run: docker push ${{ vars.CONTAINER_REGISTRY_ENDPOINT }}/${{ env.ECR_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Push the Docker Image with latest tag
        run: docker push ${{ vars.CONTAINER_REGISTRY_ENDPOINT }}/${{ env.ECR_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
