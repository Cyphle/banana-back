name: Build and Push to ECR

on:
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      ECR_NAMESPACE: banana
      IMAGE_NAME: banana-back

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust (pour les tests et clippy)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --release

      - name: Run Clippy
        run: cargo clippy --release

      # ✅ SOLUTION ALTERNATIVE : Build avec un conteneur Rust + OpenSSL statique
      - name: Build for Alpine with custom container
        run: |
          cat << 'EOF' > Dockerfile.build
          FROM rust:alpine3.22
          
          # Installer les dépendances nécessaires
          RUN apk add --no-cache \
              musl-dev \
              openssl-dev \
              openssl-libs-static \
              pkgconf \
              git \
              gcc
          
          # Ajouter le target musl
          RUN rustup target add x86_64-unknown-linux-musl
          
          # Configurer le linker pour musl
          ENV CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc
          
          WORKDIR /workspace
          EOF
          
          # Build de l'image de build
          docker build -f Dockerfile.build -t rust-musl-builder .
          
          # Build du projet avec OpenSSL statique
          docker run --rm \
            -v $PWD:/workspace \
            -v ~/.cargo/registry:/usr/local/cargo/registry \
            -w /workspace \
            -e OPENSSL_STATIC=1 \
            -e PKG_CONFIG_ALL_STATIC=1 \
            rust-musl-builder \
            cargo build --release --target x86_64-unknown-linux-musl

      - name: Login to Scaleway Container Registry
        uses: docker/login-action@v3
        with:
          username: nologin
          password: ${{ secrets.SCW_SECRET_KEY }}
          registry: ${{ vars.CONTAINER_REGISTRY_ENDPOINT }}

      - name: Build the Docker image
        run: docker build . -t ${{ vars.CONTAINER_REGISTRY_ENDPOINT }}/${{ env.ECR_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Tag image as latest
        run: docker tag ${{ vars.CONTAINER_REGISTRY_ENDPOINT }}/${{ env.ECR_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ vars.CONTAINER_REGISTRY_ENDPOINT }}/${{ env.ECR_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest

      - name: Push the Docker Image with SHA tag
        run: docker push ${{ vars.CONTAINER_REGISTRY_ENDPOINT }}/${{ env.ECR_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Push the Docker Image with latest tag
        run: docker push ${{ vars.CONTAINER_REGISTRY_ENDPOINT }}/${{ env.ECR_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest